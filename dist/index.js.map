{"version":3,"sources":["../src/actions/registerIP.ts","../src/functions/uploadJSONToIPFS.ts","../src/providers/wallet.ts","../src/templates/index.ts","../src/functions/checkVerification.ts","../src/actions/licenseIP.ts","../src/queries.ts","../src/actions/attachTerms.ts","../src/actions/getAvailableLicenses.ts","../src/lib/api.ts","../src/actions/getIPDetails.ts","../src/index.ts"],"sourcesContent":["import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport {PinataSDK} from \"pinata-web3\";\nimport type { LicenseTerms, RegisterIpResponse } from \"@story-protocol/core-sdk\";\nimport { createHash } from \"node:crypto\";  // Added node: protocol\nimport { uploadJSONToIPFS } from \"../functions/uploadJSONToIPFS\";\nimport { WalletProvider } from \"../providers/wallet\";\nimport { registerIPTemplate } from \"../templates\";\nimport type { RegisterIPParams } from \"../types\";\nimport { zeroAddress, zeroHash } from \"viem\";\nimport { checkVerification } from \"../functions/checkVerification\";\n\nexport { registerIPTemplate };\n\nconst commercialRemixTerms: LicenseTerms = {\n    transferable: true,\n    royaltyPolicy: '0xBe54FB168b3c982b7AaE60dB6CF75Bd8447b390E', // RoyaltyPolicyLAP address from https://docs.story.foundation/docs/deployed-smart-contracts\n    defaultMintingFee: 0n,\n    expiration: 0n,\n    commercialUse: true,\n    commercialAttribution: true,\n    commercializerChecker: zeroAddress,\n    commercializerCheckerData: zeroAddress,\n    commercialRevShare: 50, // can claim 50% of derivative revenue\n    commercialRevCeiling: 0n,\n    derivativesAllowed: true,\n    derivativesAttribution: true,\n    derivativesApproval: false,\n    derivativesReciprocal: true,\n    derivativeRevCeiling: 0n,\n    currency: '0x1514000000000000000000000000000000000000', // $WIP address from https://docs.story.foundation/docs/deployed-smart-contracts\n    uri: '',\n  }\n\n  const licensingConfig = {\n    isSet: false,\n    mintingFee: 0n,\n    licensingHook: zeroAddress,\n    hookData: zeroHash,\n    commercialRevShare: 0,\n    disabled: false,\n    expectMinimumGroupRewardShare: 0,\n    expectGroupRewardPool: zeroAddress,\n  };\n\n\nexport class RegisterIPAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async registerIP(\n        params: RegisterIPParams,\n        runtime: IAgentRuntime\n    ): Promise<RegisterIpResponse> {\n        const storyClient = this.walletProvider.getStoryClient();\n\n        // configure ip metadata\n        const ipMetadata = storyClient.ipAsset.generateIpMetadata({\n            title: params.title,\n            description: params.description,\n            ipType: params.ipType ? params.ipType : undefined,\n            creators: params.creatorName? [{\n                name: params.creatorName,\n                address: this.walletProvider.getAddress(),\n                contributionPercent: 100\n            }] : undefined,\n            media: params.mediaUrl ? [{\n                name: params.title,\n                url: params.mediaUrl,\n                mimeType: params.mimeType,\n            }]: undefined\n        });\n\n        // configure nft metadata\n        const nftMetadata = {\n            name: params.title,\n            description: params.description,\n        };\n\n        const pinataJWT = runtime.getSetting(\"PINATA_JWT\");\n        if (!pinataJWT) throw new Error(\"PINATA_JWT not configured\");\n        const pinata = new PinataSDK({ pinataJwt: pinataJWT });\n\n        // upload metadata to ipfs\n        const ipIpfsHash = await uploadJSONToIPFS(pinata, ipMetadata);\n        const ipHash = createHash(\"sha256\")\n            .update(JSON.stringify(ipMetadata))\n            .digest(\"hex\");\n        const nftIpfsHash = await uploadJSONToIPFS(pinata, nftMetadata);\n        const nftHash = createHash(\"sha256\")\n            .update(JSON.stringify(nftMetadata))\n            .digest(\"hex\");\n\n        // register ip\n        const response =\n            await storyClient.ipAsset.mintAndRegisterIpAssetWithPilTerms({\n                spgNftContract: \"0xc32A8a0FF3beDDDa58393d022aF433e78739FAbc\",\n                licenseTermsData: [{\n                    terms: commercialRemixTerms,\n                    licensingConfig: licensingConfig\n                }],\n                allowDuplicates: true,\n                ipMetadata: {\n                    ipMetadataURI: `https://ipfs.io/ipfs/${ipIpfsHash}`,\n                    ipMetadataHash: `0x${ipHash}`,\n                    nftMetadataURI: `https://ipfs.io/ipfs/${nftIpfsHash}`,\n                    nftMetadataHash: `0x${nftHash}`,\n                },\n                recipient: this.walletProvider.getAddress(),\n                txOptions: { waitForTransaction: true },\n            });\n\n        return response;\n    }\n}\n\nexport const registerIPAction = {\n    name: \"REGISTER_IP\",\n    description: \"Register an NFT as an IP Asset on Story\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting REGISTER_IP handler...\");\n\n        // initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        const registerIPContext = composeContext({\n            state: currentState,\n            template: registerIPTemplate,\n        });\n\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: registerIPContext,\n            modelClass: ModelClass.SMALL,\n        });\n\n        const requiredFields = ['title', 'description', 'creatorName', 'mediaUrl', 'mimeType'];\n        const missingFields = requiredFields.filter(field => !content[field]);\n\n        if (missingFields.length > 0) {\n            callback?.({\n                text: `Please provide the following details: ${missingFields.join(', ')}.`,\n            });\n            return false; // Prevent further execution\n        }\n\n        const walletProvider = new WalletProvider(runtime);\n        const action = new RegisterIPAction(walletProvider);\n\n\n        try {\n            // Check for verification\n            const verified = await checkVerification(walletProvider.getAddress());\n            if (!verified) {\n                callback?.({\n                    text: `Artist needs to verify first, please verify using /verifyCredential`,\n                });\n                return false;\n            } else {\n                callback?.({\n                    text: `Artist successfully verified!`,\n                });\n            }\n\n            const response = await action.registerIP(content, runtime);\n            callback?.({\n                text: `Successfully registered IP ID: ${response.ipId}. Transaction Hash: ${response.txHash}. View it on the explorer: https://aeneid.explorer.story.foundation/ipa/${response.ipId}`,\n            });\n            return true;\n        } catch (e) {\n            elizaLogger.error(\"Error registering IP:\", e.message);\n            callback?.({ text: `Error registering IP: ${e.message}` });\n            return false;\n        }\n    },\n    template: registerIPTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"STORY_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I would like to register my IP.\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Sure! Please provide the title, description of your IP, creator's name, url of your media and its mime type.\",\n                    action: \"REGISTER_IP\",\n                },\n            },\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Register my IP titled 'My IP' with the description 'This is my IP'.\",\n                },\n            },\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I want to register an IP titled 'My Artwork' with the description 'A beautiful piece of art'. My name is 'John Doe', and here is the media URL: 'https://example.com/artwork.jpg' with mime type 'image/jpeg'.\",\n                },\n            },\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Please register my IP titled 'My Music' with the description 'An original song'. The creator's name is 'Jane Smith', media URL is 'https://example.com/music.mp3', and the mime type is 'audio/mpeg'.\",\n                },\n            },\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I would like to register my IP titled 'My Book' with the description 'A thrilling novel'. The creator is 'Alice Johnson', media URL is 'https://example.com/book.pdf', and the mime type is 'application/pdf'.\",\n                },\n            },\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Register my IP titled 'My Game' with the description 'An exciting adventure game'. Creator's name is 'Bob Brown', media URL is 'https://example.com/game.zip', and mime type is 'application/zip'.\",\n                },\n            },\n        ],\n    ],\n    similes: [\"REGISTER_IP\", \"REGISTER_NFT\"],\n};\n","import { PinataSDK } from \"pinata-web3\";\n\nexport async function uploadJSONToIPFS(\n    pinata: PinataSDK,\n    jsonMetadata: Record<string, unknown>  // Replaced any with Record<string, unknown>\n): Promise<string> {\n    const { IpfsHash } = await pinata.upload.json(jsonMetadata);\n    return IpfsHash;\n}\n","import type { IAgentRuntime, Provider, Memory, State } from \"@elizaos/core\";\nimport {\n  createPublicClient,\n  createWalletClient,\n  http,\n  formatUnits,\n  type PublicClient,\n  type WalletClient,\n  type Chain,\n  type HttpTransport,\n  type Address,\n  type Account,\n  type Transport,\n  defineChain,\n} from \"viem\";\nimport type { SupportedChain, ChainMetadata } from \"../types\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { StoryClient, type StoryConfig } from \"@story-protocol/core-sdk\";\n\nexport const storyAeneid = /*#__PURE__*/ defineChain({\n    id: 1315,\n    name: 'Story Aeneid',\n    network: 'story-aeneid',\n    nativeCurrency: {\n      decimals: 18,\n      name: 'IP',\n      symbol: 'IP',\n    },\n    rpcUrls: {\n      default: { http: ['https://aeneid.storyrpc.io'] },\n    },\n    blockExplorers: {\n      default: {\n        name: 'Story Aeneid Explorer',\n        url: 'https://aeneid.storyscan.xyz',\n      },\n    },\n    contracts: {\n      multicall3: {\n        address: '0xca11bde05977b3631167028862be2a173976ca11',\n        blockCreated: 1792,\n      },\n    },\n    testnet: true,\n  })\n\nexport const DEFAULT_CHAIN_CONFIGS: Record<SupportedChain, ChainMetadata> = {\n  aeneid: {\n    chainId: 1315,\n    name: \"Aeneid Testnet\",\n    chain: storyAeneid,\n    rpcUrl: \"https://aeneid.storyrpc.io/\",\n    nativeCurrency: {\n      name: \"IP\",\n      symbol: \"IP\",\n      decimals: 18,\n    },\n    blockExplorerUrl: \"https://aeneid.storyscan.xyz\",\n  },\n} as const;\n\nexport class WalletProvider {\n  private storyClient: StoryClient;\n  private publicClient: PublicClient<HttpTransport, Chain, Account | undefined>;\n  private walletClient: WalletClient;\n  private address: Address;\n  runtime: IAgentRuntime;\n\n  constructor(runtime: IAgentRuntime) {\n    const privateKey = runtime.getSetting(\"STORY_PRIVATE_KEY\");\n    if (!privateKey) throw new Error(\"STORY_PRIVATE_KEY not configured\");\n\n    this.runtime = runtime;\n\n    const account = privateKeyToAccount(privateKey as Address);\n    this.address = account.address;\n\n    const config: StoryConfig = {\n      account: account,\n      transport: http(DEFAULT_CHAIN_CONFIGS.aeneid.rpcUrl),\n      chainId: \"aeneid\",\n    };\n    this.storyClient = StoryClient.newClient(config);\n\n    const baseConfig = {\n      chain: storyAeneid,\n      transport: http(DEFAULT_CHAIN_CONFIGS.aeneid.rpcUrl),\n    } as const;\n    this.publicClient = createPublicClient<HttpTransport>(\n      baseConfig\n    ) as PublicClient<HttpTransport, Chain, Account | undefined>;\n\n    this.walletClient = createWalletClient<HttpTransport>({\n      chain: storyAeneid,\n      transport: http(DEFAULT_CHAIN_CONFIGS.aeneid.rpcUrl),\n      account: account.address as `0x${string}`,\n    });\n  }\n\n  getAddress(): Address {\n    return this.address;\n  }\n\n  async getWalletBalance(): Promise<string | null> {\n    try {\n      const balance = await this.publicClient.getBalance({\n        address: this.address,\n      });\n      return formatUnits(balance, 18);\n    } catch (error) {\n      console.error(\"Error getting wallet balance:\", error);\n      return null;\n    }\n  }\n\n  async connect(): Promise<`0x${string}`> {\n    return this.runtime.getSetting(\"STORY_PRIVATE_KEY\") as `0x${string}`;\n  }\n\n  getPublicClient(): PublicClient<HttpTransport, Chain, Account | undefined> {\n    return this.publicClient;\n  }\n\n  getWalletClient(): WalletClient {\n    if (!this.walletClient) throw new Error(\"Wallet not connected\");\n    return this.walletClient;\n  }\n\n  getStoryClient(): StoryClient {\n    if (!this.storyClient) throw new Error(\"StoryClient not connected\");\n    return this.storyClient;\n  }\n}\n\nexport const storyWalletProvider: Provider = {\n  async get(\n    runtime: IAgentRuntime,\n    // eslint-disable-next-line\n    _message: Memory,\n    // eslint-disable-next-line\n    _state?: State\n  ): Promise<string | null> {\n    // Check if the user has a Story wallet\n    if (!runtime.getSetting(\"STORY_PRIVATE_KEY\")) {\n      return null;\n    }\n\n    try {\n      const walletProvider = new WalletProvider(runtime);\n      const address = walletProvider.getAddress();\n      const balance = await walletProvider.getWalletBalance();\n      return `Story Wallet Address: ${address}\\nBalance: ${balance} IP`;\n    } catch (error) {\n      console.error(\"Error in Story wallet provider:\", error);\n      return null;\n    }\n  },\n};\n","export const registerIPTemplate = `Given the recent messages below:\n\n{{recentMessages}}\n\nExtract the following information about the requested IP registration:\n- Field \"title\": The title of your IP. **Do not search the web for any information related to the title.**\n- Field \"description\": The description of your IP. **Do not search the web for any information related to the description.**\n- Field \"ipType\": The type of your IP. **Do not search the web for any information related to the IP type.**\n- Field \"creatorName\": The name of the creator. **Do not search the web for any information related to the creator's name.**\n- Field \"mediaUrl\": The media url for the media provided by the creator. Should be included in description or provided by artist. If not found, ask the user directly for the media URL. **Do not search the web for the URL, do not attempt to access it, validate it, or use any web search tools. Simply collect the URL as provided by the user.**\n- Field \"mimeType\": The mimetype is the mime type of media url, ask for the mime type if not provided or extract from media url. **Do not search the web for any information related to the mime type.**\n\nRespond with a JSON markdown block containing only the extracted values. A user must explicitly provide a title and description.\n\n\\`\\`\\`json\n{\n    \"title\": string,\n    \"description\": string,\n    \"ipType\": string,\n    \"creatorName\": string,\n    \"mediaUrl\": string,\n    \"mimeType\": string,\n}\n\\`\\`\\`\n`;\n\nexport const licenseIPTemplate = `Given the recent messages below:\n\n{{recentMessages}}\n\nExtract the following information about the requested IP licensing:\n- Field \"licensorIpId\": The IP Asset that you want to mint a license from\n- Field \"licenseTermsId\": The license terms that you want to mint a license for\n- Field \"amount\": The amount of licenses to mint\n\nRespond with a JSON markdown block containing only the extracted values. A user must explicitly provide a licensorIpId and licenseTermsId.\nIf they don't provide the amount, set it as null.\n\n\\`\\`\\`json\n{\n    \"licensorIpId\": string,\n    \"licenseTermsId\": string,\n    \"amount\": number | null\n}\n\\`\\`\\`\n`;\n\nexport const getAvailableLicensesTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested IP licensing:\n- Field \"ipid\": The IP Asset that you want to mint a license from\n\nRespond with a JSON markdown block containing only the extracted values. A user must provide an ipId.\n\n\\`\\`\\`json\n{\n    \"ipid\": string\n}\n\\`\\`\\`\n`;\n\nexport const getIPDetailsTemplate = `Given the recent messages below:\n\n{{recentMessages}}\n\nExtract the following information about the requested IP details:\n- Field \"ipId\": The IP Asset that you want to get details for\n\nRespond with a JSON markdown block containing only the extracted values. A user must provide an ipId.\n\n\\`\\`\\`json\n{\n    \"ipId\": string\n}\n\\`\\`\\`\n`;\n\nexport const attachTermsTemplate = `Given the recent messages below:\n\n{{recentMessages}}\n\nExtract the following information about attaching license terms to an IP Asset:\n- Field \"ipId\": The IP Asset that you want to attach the license terms to\n- Field \"mintingFee\": The fee to mint this license from the IP Asset.\n- Field \"commercialUse\": Whether or not the IP Asset can be used commercially.\n- Field \"commercialRevShare\": The percentage of revenue that the IP Asset owner will receive\nfrom commercial use of the IP Asset. This must be between 0 and 100. If a user specifies\na commercialRevShare, then commercialUse must be set to true.\n\nRespond with a JSON markdown block containing only the extracted values. A user must provide an ipId. If they don't provide\nthe others fields, set them as null.\n\n\\`\\`\\`json\n{\n    \"ipId\": string,\n    \"mintingFee\": number | null,\n    \"commercialUse\": boolean | null,\n    \"commercialRevShare\": number | null\n}\n\\`\\`\\`\n`;\n","import { ethers } from \"ethers\";\n\n// Set the chainId from your environment or default to 1942999413.\nconst chainId = process.env.CHAIN_ID\n  ? Number(process.env.CHAIN_ID)\n  : 1942999413;\n\n// Create a provider with custom network settings.\nconst provider = new ethers.JsonRpcProvider(process.env.HUMANITY_RPC_URL, {\n    chainId,\n    name: \"custom\",\n    ensAddress: null,\n  });\n\n/**\n * Checks if the given address is verified on Humanity Protocol (on-chain check).\n * Uses the IVC contract's isVerified function.\n */\nconst vcContractABI = [\n    \"function isVerified(address _user) view returns (bool)\",\n  ];\n  const vcContract = new ethers.Contract(\n    process.env.VC_CONTRACT_ADDRESS,\n    vcContractABI,\n    provider\n  );\n\nexport const checkVerification = async (subject_address: string) => {\n    try {\n      const isVerified = await vcContract.isVerified(subject_address);\n      return isVerified;\n    } catch (error) {\n      console.error(\"Error checking verification:\", error);\n      throw error;\n    }\n  };\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { WalletProvider } from \"../providers/wallet\";\nimport { licenseIPTemplate } from \"../templates\";\nimport type { LicenseIPParams } from \"../types\";\nimport type { MintLicenseTokensResponse } from \"@story-protocol/core-sdk\";\nimport { hasIpAttachedLicenseTerms } from \"../queries\";\n\nexport { licenseIPTemplate };\n\nexport class LicenseIPAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async licenseIP(\n        params: LicenseIPParams\n    ): Promise<MintLicenseTokensResponse> {\n        const storyClient = this.walletProvider.getStoryClient();\n        const publicClient = this.walletProvider.getPublicClient();\n\n        const hasLicenseTerms = await hasIpAttachedLicenseTerms(publicClient, {\n            ipId: params.licensorIpId,\n            licenseTemplate: \"0x58E2c909D557Cd23EF90D14f8fd21667A5Ae7a93\",\n            licenseTermsId: BigInt(params.licenseTermsId),\n        });\n        // check if license terms are attached to the ip asset\n        if (!hasLicenseTerms) {\n            throw new Error(\"License terms are not attached to the IP Asset\");\n        }\n        const response = await storyClient.license.mintLicenseTokens({\n            licensorIpId: params.licensorIpId,\n            licenseTermsId: params.licenseTermsId,\n            amount: params.amount || 1,\n            maxMintingFee: BigInt(0), // disabled\n            maxRevenueShare: 100, // default\n            txOptions: { waitForTransaction: true }\n        });\n\n        return response;\n    }\n}\n\nexport const licenseIPAction = {\n    name: \"LICENSE_IP\",\n    description: \"License an IP Asset on Story\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting LICENSE_IP handler...\");\n\n        // initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        const licenseIPContext = composeContext({\n            state: currentState,\n            template: licenseIPTemplate,\n        });\n\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: licenseIPContext,\n            modelClass: ModelClass.SMALL,\n        });\n\n        const walletProvider = new WalletProvider(runtime);\n        const action = new LicenseIPAction(walletProvider);\n        try {\n            const response = await action.licenseIP(content);\n            callback?.({\n                text: `Successfully minted license tokens: ${response.licenseTokenIds.join(\", \")}. Transaction Hash: ${response.txHash}. View it on the block explorer: https://aeneid.storyscan.xyz/tx/${response.txHash}`,\n            });\n            return true;\n        } catch (e) {\n            elizaLogger.error(\"Error licensing IP:\", e.message);\n            callback?.({ text: `Error licensing IP: ${e.message}` });\n            return false;\n        }\n    },\n    template: licenseIPTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"STORY_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I would like to license an IP.\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Sure! Please provide the ipId of the IP you want to license and the license terms id you want to attach.\",\n                    action: \"LICENSE_IP\",\n                },\n            },\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"License an IP Asset 0x2265F2b8e47F98b3Bdf7a1937EAc27282954A4Db with license terms 1\",\n                },\n            },\n        ],\n    ],\n    similes: [\"LICENSE\", \"LICENSE_IP\", \"LICENSE_IP_ASSET\"],\n};\n","import type { Account, HttpTransport, Chain, Address, PublicClient } from \"viem\";\n\ntype LicenseRegistryHasIpAttachedLicenseTermsRequest = {\n    ipId: Address;\n    licenseTemplate: Address;\n    licenseTermsId: bigint;\n};\n\nexport const licenseRegistryAbi = [\n    {\n        type: \"constructor\",\n        inputs: [\n            {\n                name: \"licensingModule\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            { name: \"disputeModule\", internalType: \"address\", type: \"address\" },\n            { name: \"ipGraphAcl\", internalType: \"address\", type: \"address\" },\n        ],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"error\",\n        inputs: [\n            { name: \"authority\", internalType: \"address\", type: \"address\" },\n        ],\n        name: \"AccessManagedInvalidAuthority\",\n    },\n    {\n        type: \"error\",\n        inputs: [\n            { name: \"caller\", internalType: \"address\", type: \"address\" },\n            { name: \"delay\", internalType: \"uint32\", type: \"uint32\" },\n        ],\n        name: \"AccessManagedRequiredDelay\",\n    },\n    {\n        type: \"error\",\n        inputs: [{ name: \"caller\", internalType: \"address\", type: \"address\" }],\n        name: \"AccessManagedUnauthorized\",\n    },\n    {\n        type: \"error\",\n        inputs: [{ name: \"target\", internalType: \"address\", type: \"address\" }],\n        name: \"AddressEmptyCode\",\n    },\n    {\n        type: \"error\",\n        inputs: [\n            {\n                name: \"implementation\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n        ],\n        name: \"ERC1967InvalidImplementation\",\n    },\n    { type: \"error\", inputs: [], name: \"ERC1967NonPayable\" },\n    { type: \"error\", inputs: [], name: \"FailedInnerCall\" },\n    { type: \"error\", inputs: [], name: \"InvalidInitialization\" },\n    {\n        type: \"error\",\n        inputs: [\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\n            {\n                name: \"parentIpIds\",\n                internalType: \"address[]\",\n                type: \"address[]\",\n            },\n        ],\n        name: \"LicenseRegistry__AddParentIpToIPGraphFailed\",\n    },\n    {\n        type: \"error\",\n        inputs: [],\n        name: \"LicenseRegistry__CallerNotLicensingModule\",\n    },\n    {\n        type: \"error\",\n        inputs: [\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\n        ],\n        name: \"LicenseRegistry__DerivativeAlreadyRegistered\",\n    },\n    {\n        type: \"error\",\n        inputs: [\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\n        ],\n        name: \"LicenseRegistry__DerivativeIpAlreadyHasChild\",\n    },\n    {\n        type: \"error\",\n        inputs: [\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\n        ],\n        name: \"LicenseRegistry__DerivativeIpAlreadyHasLicense\",\n    },\n    {\n        type: \"error\",\n        inputs: [{ name: \"ipId\", internalType: \"address\", type: \"address\" }],\n        name: \"LicenseRegistry__DerivativeIsParent\",\n    },\n    {\n        type: \"error\",\n        inputs: [\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            {\n                name: \"licenseTermsId\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"LicenseRegistry__DuplicateLicense\",\n    },\n    {\n        type: \"error\",\n        inputs: [\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\n            { name: \"index\", internalType: \"uint256\", type: \"uint256\" },\n            { name: \"length\", internalType: \"uint256\", type: \"uint256\" },\n        ],\n        name: \"LicenseRegistry__IndexOutOfBounds\",\n    },\n    {\n        type: \"error\",\n        inputs: [{ name: \"ipId\", internalType: \"address\", type: \"address\" }],\n        name: \"LicenseRegistry__IpExpired\",\n    },\n    {\n        type: \"error\",\n        inputs: [\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            {\n                name: \"licenseTermsId\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"LicenseRegistry__LicenseTermsAlreadyAttached\",\n    },\n    {\n        type: \"error\",\n        inputs: [\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            {\n                name: \"licenseTermsId\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"LicenseRegistry__LicenseTermsNotExists\",\n    },\n    {\n        type: \"error\",\n        inputs: [\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            {\n                name: \"licenseTermsId\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"LicenseRegistry__LicensorIpHasNoLicenseTerms\",\n    },\n    {\n        type: \"error\",\n        inputs: [\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n        ],\n        name: \"LicenseRegistry__NotLicenseTemplate\",\n    },\n    {\n        type: \"error\",\n        inputs: [{ name: \"ipId\", internalType: \"address\", type: \"address\" }],\n        name: \"LicenseRegistry__ParentIpExpired\",\n    },\n    {\n        type: \"error\",\n        inputs: [\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\n            {\n                name: \"licenseTermsId\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"LicenseRegistry__ParentIpHasNoLicenseTerms\",\n    },\n    {\n        type: \"error\",\n        inputs: [{ name: \"ipId\", internalType: \"address\", type: \"address\" }],\n        name: \"LicenseRegistry__ParentIpTagged\",\n    },\n    {\n        type: \"error\",\n        inputs: [\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n        ],\n        name: \"LicenseRegistry__ParentIpUnmatchedLicenseTemplate\",\n    },\n    {\n        type: \"error\",\n        inputs: [\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            {\n                name: \"newLicenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n        ],\n        name: \"LicenseRegistry__UnmatchedLicenseTemplate\",\n    },\n    {\n        type: \"error\",\n        inputs: [\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n        ],\n        name: \"LicenseRegistry__UnregisteredLicenseTemplate\",\n    },\n    { type: \"error\", inputs: [], name: \"LicenseRegistry__ZeroAccessManager\" },\n    { type: \"error\", inputs: [], name: \"LicenseRegistry__ZeroDisputeModule\" },\n    { type: \"error\", inputs: [], name: \"LicenseRegistry__ZeroIPGraphACL\" },\n    { type: \"error\", inputs: [], name: \"LicenseRegistry__ZeroLicenseTemplate\" },\n    { type: \"error\", inputs: [], name: \"LicenseRegistry__ZeroLicensingModule\" },\n    {\n        type: \"error\",\n        inputs: [],\n        name: \"LicensingModule__DerivativesCannotAddLicenseTerms\",\n    },\n    {\n        type: \"error\",\n        inputs: [\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            {\n                name: \"licenseTermsId\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"LicensingModule__LicenseTermsNotFound\",\n    },\n    { type: \"error\", inputs: [], name: \"NotInitializing\" },\n    { type: \"error\", inputs: [], name: \"UUPSUnauthorizedCallContext\" },\n    {\n        type: \"error\",\n        inputs: [{ name: \"slot\", internalType: \"bytes32\", type: \"bytes32\" }],\n        name: \"UUPSUnsupportedProxiableUUID\",\n    },\n    {\n        type: \"event\",\n        anonymous: false,\n        inputs: [\n            {\n                name: \"authority\",\n                internalType: \"address\",\n                type: \"address\",\n                indexed: false,\n            },\n        ],\n        name: \"AuthorityUpdated\",\n    },\n    {\n        type: \"event\",\n        anonymous: false,\n        inputs: [\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n                indexed: false,\n            },\n            {\n                name: \"licenseTermsId\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n                indexed: false,\n            },\n        ],\n        name: \"DefaultLicenseTermsSet\",\n    },\n    {\n        type: \"event\",\n        anonymous: false,\n        inputs: [\n            {\n                name: \"ipId\",\n                internalType: \"address\",\n                type: \"address\",\n                indexed: true,\n            },\n            {\n                name: \"expireTime\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n                indexed: false,\n            },\n        ],\n        name: \"ExpirationTimeSet\",\n    },\n    {\n        type: \"event\",\n        anonymous: false,\n        inputs: [\n            {\n                name: \"version\",\n                internalType: \"uint64\",\n                type: \"uint64\",\n                indexed: false,\n            },\n        ],\n        name: \"Initialized\",\n    },\n    {\n        type: \"event\",\n        anonymous: false,\n        inputs: [\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n                indexed: true,\n            },\n        ],\n        name: \"LicenseTemplateRegistered\",\n    },\n    {\n        type: \"event\",\n        anonymous: false,\n        inputs: [\n            {\n                name: \"ipId\",\n                internalType: \"address\",\n                type: \"address\",\n                indexed: true,\n            },\n            {\n                name: \"licensingConfig\",\n                internalType: \"struct Licensing.LicensingConfig\",\n                type: \"tuple\",\n                components: [\n                    { name: \"isSet\", internalType: \"bool\", type: \"bool\" },\n                    {\n                        name: \"mintingFee\",\n                        internalType: \"uint256\",\n                        type: \"uint256\",\n                    },\n                    {\n                        name: \"licensingHook\",\n                        internalType: \"address\",\n                        type: \"address\",\n                    },\n                    { name: \"hookData\", internalType: \"bytes\", type: \"bytes\" },\n                ],\n                indexed: false,\n            },\n        ],\n        name: \"LicensingConfigSetForIP\",\n    },\n    {\n        type: \"event\",\n        anonymous: false,\n        inputs: [\n            {\n                name: \"ipId\",\n                internalType: \"address\",\n                type: \"address\",\n                indexed: true,\n            },\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n                indexed: true,\n            },\n            {\n                name: \"licenseTermsId\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n                indexed: true,\n            },\n        ],\n        name: \"LicensingConfigSetForLicense\",\n    },\n    {\n        type: \"event\",\n        anonymous: false,\n        inputs: [\n            {\n                name: \"implementation\",\n                internalType: \"address\",\n                type: \"address\",\n                indexed: true,\n            },\n        ],\n        name: \"Upgraded\",\n    },\n    {\n        type: \"function\",\n        inputs: [],\n        name: \"DISPUTE_MODULE\",\n        outputs: [\n            {\n                name: \"\",\n                internalType: \"contract IDisputeModule\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [],\n        name: \"EXPIRATION_TIME\",\n        outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [],\n        name: \"IP_GRAPH\",\n        outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [],\n        name: \"IP_GRAPH_ACL\",\n        outputs: [\n            { name: \"\", internalType: \"contract IPGraphACL\", type: \"address\" },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [],\n        name: \"LICENSING_MODULE\",\n        outputs: [\n            {\n                name: \"\",\n                internalType: \"contract ILicensingModule\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [],\n        name: \"UPGRADE_INTERFACE_VERSION\",\n        outputs: [{ name: \"\", internalType: \"string\", type: \"string\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            {\n                name: \"licenseTermsId\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"attachLicenseTermsToIp\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        inputs: [],\n        name: \"authority\",\n        outputs: [{ name: \"\", internalType: \"address\", type: \"address\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            {\n                name: \"licenseTermsId\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"exists\",\n        outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\n            { name: \"index\", internalType: \"uint256\", type: \"uint256\" },\n        ],\n        name: \"getAttachedLicenseTerms\",\n        outputs: [\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            {\n                name: \"licenseTermsId\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [{ name: \"ipId\", internalType: \"address\", type: \"address\" }],\n        name: \"getAttachedLicenseTermsCount\",\n        outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [],\n        name: \"getDefaultLicenseTerms\",\n        outputs: [\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            {\n                name: \"licenseTermsId\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            { name: \"parentIpId\", internalType: \"address\", type: \"address\" },\n            { name: \"index\", internalType: \"uint256\", type: \"uint256\" },\n        ],\n        name: \"getDerivativeIp\",\n        outputs: [\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            { name: \"parentIpId\", internalType: \"address\", type: \"address\" },\n        ],\n        name: \"getDerivativeIpCount\",\n        outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [{ name: \"ipId\", internalType: \"address\", type: \"address\" }],\n        name: \"getExpireTime\",\n        outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            {\n                name: \"licenseTermsId\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"getLicensingConfig\",\n        outputs: [\n            {\n                name: \"\",\n                internalType: \"struct Licensing.LicensingConfig\",\n                type: \"tuple\",\n                components: [\n                    { name: \"isSet\", internalType: \"bool\", type: \"bool\" },\n                    {\n                        name: \"mintingFee\",\n                        internalType: \"uint256\",\n                        type: \"uint256\",\n                    },\n                    {\n                        name: \"licensingHook\",\n                        internalType: \"address\",\n                        type: \"address\",\n                    },\n                    { name: \"hookData\", internalType: \"bytes\", type: \"bytes\" },\n                ],\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\n            { name: \"index\", internalType: \"uint256\", type: \"uint256\" },\n        ],\n        name: \"getParentIp\",\n        outputs: [\n            { name: \"parentIpId\", internalType: \"address\", type: \"address\" },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\n        ],\n        name: \"getParentIpCount\",\n        outputs: [{ name: \"\", internalType: \"uint256\", type: \"uint256\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\n            { name: \"parentIpId\", internalType: \"address\", type: \"address\" },\n        ],\n        name: \"getParentLicenseTerms\",\n        outputs: [\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            {\n                name: \"licenseTermsId\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            { name: \"parentIpId\", internalType: \"address\", type: \"address\" },\n        ],\n        name: \"hasDerivativeIps\",\n        outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            {\n                name: \"licenseTermsId\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"hasIpAttachedLicenseTerms\",\n        outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            { name: \"accessManager\", internalType: \"address\", type: \"address\" },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        inputs: [],\n        name: \"isConsumingScheduledOp\",\n        outputs: [{ name: \"\", internalType: \"bytes4\", type: \"bytes4\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\n        ],\n        name: \"isDerivativeIp\",\n        outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [{ name: \"ipId\", internalType: \"address\", type: \"address\" }],\n        name: \"isExpiredNow\",\n        outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            { name: \"parentIpId\", internalType: \"address\", type: \"address\" },\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\n        ],\n        name: \"isParentIp\",\n        outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n        ],\n        name: \"isRegisteredLicenseTemplate\",\n        outputs: [{ name: \"\", internalType: \"bool\", type: \"bool\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [],\n        name: \"proxiableUUID\",\n        outputs: [{ name: \"\", internalType: \"bytes32\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            { name: \"childIpId\", internalType: \"address\", type: \"address\" },\n            {\n                name: \"parentIpIds\",\n                internalType: \"address[]\",\n                type: \"address[]\",\n            },\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            {\n                name: \"licenseTermsIds\",\n                internalType: \"uint256[]\",\n                type: \"uint256[]\",\n            },\n            { name: \"isUsingLicenseToken\", internalType: \"bool\", type: \"bool\" },\n        ],\n        name: \"registerDerivativeIp\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n        ],\n        name: \"registerLicenseTemplate\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            { name: \"newAuthority\", internalType: \"address\", type: \"address\" },\n        ],\n        name: \"setAuthority\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            {\n                name: \"newLicenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            {\n                name: \"newLicenseTermsId\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"setDefaultLicenseTerms\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\n            {\n                name: \"licensingConfig\",\n                internalType: \"struct Licensing.LicensingConfig\",\n                type: \"tuple\",\n                components: [\n                    { name: \"isSet\", internalType: \"bool\", type: \"bool\" },\n                    {\n                        name: \"mintingFee\",\n                        internalType: \"uint256\",\n                        type: \"uint256\",\n                    },\n                    {\n                        name: \"licensingHook\",\n                        internalType: \"address\",\n                        type: \"address\",\n                    },\n                    { name: \"hookData\", internalType: \"bytes\", type: \"bytes\" },\n                ],\n            },\n        ],\n        name: \"setLicensingConfigForIp\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            { name: \"ipId\", internalType: \"address\", type: \"address\" },\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            {\n                name: \"licenseTermsId\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n            },\n            {\n                name: \"licensingConfig\",\n                internalType: \"struct Licensing.LicensingConfig\",\n                type: \"tuple\",\n                components: [\n                    { name: \"isSet\", internalType: \"bool\", type: \"bool\" },\n                    {\n                        name: \"mintingFee\",\n                        internalType: \"uint256\",\n                        type: \"uint256\",\n                    },\n                    {\n                        name: \"licensingHook\",\n                        internalType: \"address\",\n                        type: \"address\",\n                    },\n                    { name: \"hookData\", internalType: \"bytes\", type: \"bytes\" },\n                ],\n            },\n        ],\n        name: \"setLicensingConfigForLicense\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            {\n                name: \"newImplementation\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            { name: \"data\", internalType: \"bytes\", type: \"bytes\" },\n        ],\n        name: \"upgradeToAndCall\",\n        outputs: [],\n        stateMutability: \"payable\",\n    },\n    {\n        type: \"function\",\n        inputs: [\n            { name: \"licensorIpId\", internalType: \"address\", type: \"address\" },\n            {\n                name: \"licenseTemplate\",\n                internalType: \"address\",\n                type: \"address\",\n            },\n            {\n                name: \"licenseTermsId\",\n                internalType: \"uint256\",\n                type: \"uint256\",\n            },\n            { name: \"isMintedByIpOwner\", internalType: \"bool\", type: \"bool\" },\n        ],\n        name: \"verifyMintLicenseToken\",\n        outputs: [\n            {\n                name: \"\",\n                internalType: \"struct Licensing.LicensingConfig\",\n                type: \"tuple\",\n                components: [\n                    { name: \"isSet\", internalType: \"bool\", type: \"bool\" },\n                    {\n                        name: \"mintingFee\",\n                        internalType: \"uint256\",\n                        type: \"uint256\",\n                    },\n                    {\n                        name: \"licensingHook\",\n                        internalType: \"address\",\n                        type: \"address\",\n                    },\n                    { name: \"hookData\", internalType: \"bytes\", type: \"bytes\" },\n                ],\n            },\n        ],\n        stateMutability: \"view\",\n    },\n] as const;\n\nexport async function hasIpAttachedLicenseTerms(\n    publicClient: PublicClient<HttpTransport, Chain, Account | undefined>,\n    request: LicenseRegistryHasIpAttachedLicenseTermsRequest\n): Promise<boolean> {\n    return await publicClient.readContract({\n        abi: licenseRegistryAbi,\n        address: \"0xBda3992c49E98392e75E78d82B934F3598bA495f\",\n        functionName: \"hasIpAttachedLicenseTerms\",\n        args: [request.ipId, request.licenseTemplate, request.licenseTermsId],\n    });\n}\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { WalletProvider } from \"../providers/wallet\";\nimport { attachTermsTemplate } from \"../templates\";\nimport type {\n    AttachLicenseTermsResponse,\n    LicenseTerms,\n    RegisterPILResponse,\n} from \"@story-protocol/core-sdk\";\nimport type { AttachTermsParams } from \"../types\";\nimport { zeroAddress } from \"viem\";\n\nexport { attachTermsTemplate };\n\nexport class AttachTermsAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async attachTerms(params: AttachTermsParams): Promise<{\n        attachTermsResponse: AttachLicenseTermsResponse;\n        registerPilTermsResponse: RegisterPILResponse;\n    }> {\n        const storyClient = this.walletProvider.getStoryClient();\n\n        elizaLogger.log(\"params\", params);\n\n        const licenseTerms: LicenseTerms = {\n            transferable: true,\n            royaltyPolicy: params.commercialUse\n                ? \"0x28b4F70ffE5ba7A26aEF979226f77Eb57fb9Fdb6\"\n                : zeroAddress,\n            defaultMintingFee: params.mintingFee\n                ? BigInt(params.mintingFee)\n                : BigInt(0),\n            expiration: BigInt(0),\n            commercialUse: params.commercialUse || false,\n            commercialAttribution: false,\n            commercializerChecker: zeroAddress,\n            commercializerCheckerData: zeroAddress,\n            commercialRevShare: params.commercialUse\n                ? params.commercialRevShare\n                : 0,\n            commercialRevCeiling: BigInt(0),\n            derivativesAllowed: true,\n            derivativesAttribution: true,\n            derivativesApproval: false,\n            derivativesReciprocal: true,\n            derivativeRevCeiling: BigInt(0),\n            currency: \"0xC0F6E387aC0B324Ec18EAcf22EE7271207dCE3d5\",\n            uri: \"\",\n        };\n\n        const registerPilTermsResponse =\n            await storyClient.license.registerPILTerms({\n                ...licenseTerms,\n                txOptions: { waitForTransaction: true },\n            });\n\n        const attachTermsResponse =\n            await storyClient.license.attachLicenseTerms({\n                ipId: params.ipId,\n                licenseTermsId: registerPilTermsResponse.licenseTermsId,\n                txOptions: { waitForTransaction: true },\n            });\n\n        return { attachTermsResponse, registerPilTermsResponse };\n    }\n}\n\nexport const attachTermsAction = {\n    name: \"ATTACH_TERMS\",\n    description: \"Attach license terms to an IP Asset on Story\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting ATTACH_TERMS handler...\");\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        const attachTermsContext = composeContext({\n            state: currentState,\n            template: attachTermsTemplate,\n        });\n\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: attachTermsContext,\n            modelClass: ModelClass.SMALL,\n        });\n\n        const walletProvider = new WalletProvider(runtime);\n        const action = new AttachTermsAction(walletProvider);\n        try {\n            const response = await action.attachTerms(content);\n            // if license terms were attached\n            if (response.attachTermsResponse.success) {\n                callback?.({\n                    text: `Successfully attached license terms: ${response.registerPilTermsResponse.licenseTermsId}. Transaction Hash: ${response.attachTermsResponse.txHash}. View it on the block explorer: https://aeneid.storyscan.xyz/tx/${response.attachTermsResponse.txHash}`,\n                });\n                return true;\n            }\n            // if license terms were already attached\n            callback?.({\n                text: `License terms ${response.registerPilTermsResponse.licenseTermsId} were already attached to IP Asset ${content.ipId}`,\n            });\n            return true;\n        } catch (e) {\n            elizaLogger.error(\"Error licensing IP:\", e.message);\n            callback?.({ text: `Error licensing IP: ${e.message}` });\n            return false;\n        }\n    },\n    template: attachTermsTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"STORY_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I would like to attach license terms to my IP.\",\n                    action: \"ATTACH_TERMS\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Sure! What is the ipId? You should also tell me if you want to add a minting fee, or if you want to enable commercial use of your IP. If so, you can add a revenue share as well.\",\n                    action: \"ATTACH_TERMS\",\n                },\n            },\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Attach commercial, 10% rev share license terms to IP Asset 0x2265F2b8e47F98b3Bdf7a1937EAc27282954A4Db\",\n                },\n            },\n        ],\n    ],\n    similes: [\"ATTACH_TERMS\", \"ATTACH_TERMS_TO_IP\"],\n};\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { getAvailableLicensesTemplate, licenseIPTemplate } from \"../templates\";\nimport type { Address } from \"viem\";\nimport { type IPLicenseDetails, RESOURCE_TYPE } from \"../types/api\";\nimport { API_KEY, API_URL } from \"../lib/api\";\n\nexport { licenseIPTemplate };\n\n// Types for request/response\ntype GetAvailableLicensesParams = {\n    ipid: Address;\n};\n\ntype GetAvailableLicensesResponse = {\n    data: IPLicenseDetails[];\n};\n\n/**\n * Class to handle fetching available licenses for an IP asset from Story Protocol\n */\nexport class GetAvailableLicensesAction {\n    // Default query options for license terms\n    private readonly defaultQueryOptions = {\n        pagination: { limit: 10, offset: 0 },\n        orderBy: \"blockNumber\",\n        orderDirection: \"desc\",\n    };\n\n    async getAvailableLicenses(\n        params: GetAvailableLicensesParams\n    ): Promise<GetAvailableLicensesResponse> {\n        elizaLogger.log(\n            \"Fetching from\",\n            `${API_URL}/${RESOURCE_TYPE.IP_LICENSE_DETAILS}`\n        );\n\n        const response = await fetch(\n            `${API_URL}/${RESOURCE_TYPE.IP_LICENSE_DETAILS}`,\n            {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"x-api-key\": API_KEY,\n                    \"x-chain\": \"1315\",\n                },\n                cache: \"no-cache\",\n                body: JSON.stringify({\n                    ip_ids: [params.ipid],\n                    options: this.defaultQueryOptions,\n                }),\n            }\n        );\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        try {\n            const text = await response.text();\n            const licenseDetailsResponse = JSON.parse(text);\n            elizaLogger.log(\"licenseDetailsResponse\", licenseDetailsResponse);\n            return licenseDetailsResponse;\n        } catch (e) {\n            elizaLogger.error(\"Failed to parse response\");\n            throw new Error(`Failed to parse JSON response: ${e.message}`);\n        }\n    }\n}\n\n/**\n * Formats a license's terms into a human-readable string\n */\nconst formatLicenseTerms = (license: IPLicenseDetails): string => {\n    const terms = license.terms;\n    return `License ID: ${license.id}\n- Terms:\n  • Commercial Use: ${terms.commercialUse ? \"Allowed\" : \"Not Allowed\"}\n  • Commercial Attribution: ${terms.commercialAttribution ? \"Required\" : \"Not Required\"}\n  • Derivatives: ${terms.derivativesAllowed ? \"Allowed\" : \"Not Allowed\"}\n  • Derivatives Attribution: ${terms.derivativesAttribution ? \"Required\" : \"Not Required\"}\n  • Derivatives Approval: ${terms.derivativesApproval ? \"Required\" : \"Not Required\"}\n  • Revenue Share: ${terms.commercialRevenueShare ? `${terms.commercialRevenueShare}%` : \"Not Required\"}`;\n};\n\n/**\n * Main action configuration for getting available licenses\n */\nexport const getAvailableLicensesAction = {\n    name: \"GET_AVAILABLE_LICENSES\",\n    description: \"Get available licenses for an IP Asset on Story\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting GET_AVAILABLE_LICENSES handler...\");\n\n        // Initialize or update state\n        let currentState = state;  // Create a new variable instead of reassigning parameter\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        // Generate parameters from context\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: composeContext({\n                state: currentState,\n                template: getAvailableLicensesTemplate,\n            }),\n            modelClass: ModelClass.SMALL,\n        });\n\n        // Fetch and format license data\n        const action = new GetAvailableLicensesAction();\n        try {\n            const response = await action.getAvailableLicenses(content);\n            const formattedResponse = response.data\n                .map(formatLicenseTerms)\n                .join(\"\\n\");\n\n            callback?.({\n                text: formattedResponse,\n                action: \"GET_AVAILABLE_LICENSES\",\n                source: \"Story Protocol API\",\n            });\n            return true;\n        } catch (e) {\n            elizaLogger.error(\"Error fetching available licenses:\", e.message);\n            callback?.({\n                text: `Error fetching available licenses: ${e.message}`,\n            });\n            return false;\n        }\n    },\n    template: getAvailableLicensesTemplate,\n    validate: async () => true,\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Get available licenses for an IP Asset 0x2265F2b8e47F98b3Bdf7a1937EAc27282954A4Db\",\n                    action: \"GET_AVAILABLE_LICENSES\",\n                },\n            },\n        ],\n    ],\n    similes: [\n        \"AVAILABLE_LICENSES\",\n        \"AVAILABLE_LICENSES_FOR_IP\",\n        \"AVAILABLE_LICENSES_FOR_ASSET\",\n    ],\n};\n","import {\n  type IPLicenseTerms,\n  type PILTerms,\n  QUERY_ORDER_BY,\n  QUERY_ORDER_DIRECTION,\n  type QueryOptions,\n  RESOURCE_TYPE,\n  type ResourceType,\n  type Trait,\n} from \"../types/api\";\nimport { elizaLogger } from \"@elizaos/core\";\n\nimport { camelize } from \"./utils\";\nconst API_BASE_URL = process.env.STORY_API_BASE_URL;\nconst API_VERSION = \"v3\";\nexport const API_URL = `${API_BASE_URL}/${API_VERSION}`;\nexport const API_KEY = process.env.STORY_API_KEY || \"\";\n\nexport async function getResource(\n  resourceName: ResourceType,\n  resourceId: string,\n  // eslint-disable-next-line\n  _options?: QueryOptions\n) {\n  try {\n    elizaLogger.log(\n      `Fetching resource ${API_URL}/${resourceName}/${resourceId}`\n    );\n\n    const res = await fetch(`${API_URL}/${resourceName}/${resourceId}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-Api-Key\": API_KEY as string,\n        \"X-Chain\": \"story-aeneid\",\n      },\n    });\n\n    if (res.ok) {\n      elizaLogger.log(\"Response is ok\");\n      return res.json();\n    }\n    elizaLogger.log(\"Response is not ok\");\n    elizaLogger.log(JSON.stringify(res));\n    throw new Error(`HTTP error! status: ${res.status}`);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function listResource(\n  resourceName: ResourceType,\n  options?: QueryOptions\n) {\n  try {\n    const _options = {\n      pagination: {\n        limit: 10,\n        offset: 0,\n      },\n      orderBy: QUERY_ORDER_BY.BLOCK_NUMBER,\n      orderDirection: QUERY_ORDER_DIRECTION.DESC,\n      ...options,\n    };\n    elizaLogger.log(`Calling Story API ${resourceName}`);\n    elizaLogger.log(`STORY_API_KEY: ${API_KEY}`);\n    elizaLogger.log(`API_URL: ${API_URL}`);\n    elizaLogger.log(`API_VERSION: ${API_VERSION}`);\n    elizaLogger.log(`_options: ${JSON.stringify(_options)}`);\n    const res = await fetch(`${API_URL}/${resourceName}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": API_KEY as string,\n        \"x-chain\": \"story-aeneid\",\n      },\n      cache: \"no-cache\",\n      ...(_options && { body: JSON.stringify({ options: _options }) }),\n    });\n    if (res.ok) {\n      elizaLogger.log(\"Response is ok\");\n      elizaLogger.log(res.ok);\n      return res.json();\n    }\n    elizaLogger.log(\"Response is not ok\");\n    elizaLogger.log(res);\n    return res;\n  } catch (error) {\n    elizaLogger.log(\"List resource Error\");\n    console.error(error);\n  }\n}\n\nexport async function fetchLicenseTermsDetails(data: IPLicenseTerms[]) {\n  const requests = data.map((item) =>\n    getResource(RESOURCE_TYPE.LICENSE_TERMS, item.licenseTermsId)\n  );\n  const results = await Promise.all(requests);\n\n  return results\n    .filter((value) => !!value)\n    .map((result) => {\n      return {\n        ...result.data,\n        licenseTerms: convertLicenseTermObject(result.data.licenseTerms),\n      };\n    });\n}\n\ntype LicenseTerms = Partial<PILTerms>;\n\nexport function convertLicenseTermObject(licenseTerms: Trait[]): LicenseTerms {\n  return licenseTerms.reduce((acc, option: Trait): LicenseTerms => {\n    const key = camelize(option.trait_type) as keyof PILTerms;\n    acc[key] =\n      option.value === \"true\"\n        ? true\n        : option.value === \"false\"\n        ? false\n        : (option.value as string | number); // Replaced any with string | number\n    return acc as LicenseTerms;\n  }, {});\n}\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { getIPDetailsTemplate } from \"../templates\";\nimport type { Address } from \"viem\";\nimport { type Asset, RESOURCE_TYPE } from \"../types/api\";\nimport { API_URL, getResource } from \"../lib/api\";\n\nexport { getIPDetailsTemplate };\n\n// Types for the action parameters and response\ntype GetIPDetailsParams = {\n    ipId: Address;\n};\n\ntype GetIPDetailsResponse = {\n    data: Asset;\n};\n\n/**\n * Class handling IP details retrieval from Story Protocol\n */\nclass GetIPDetailsAction {\n    async getIPDetails(\n        params: GetIPDetailsParams\n    ): Promise<GetIPDetailsResponse> {\n        elizaLogger.log(\"Fetching from\", `${API_URL}/${RESOURCE_TYPE.ASSET}`);\n        return (await getResource(\n            RESOURCE_TYPE.ASSET,\n            params.ipId\n        )) as GetIPDetailsResponse;\n    }\n}\n\n/**\n * Formats IP asset details into a readable string\n */\nconst formatIPDetails = (data: Asset): string => `IP Asset Details:\nID: ${data.id}\nNFT Name: ${data.nftMetadata.name}\nToken Contract: ${data.nftMetadata.tokenContract}\nToken ID: ${data.nftMetadata.tokenId}\nImage URL: ${data.nftMetadata.imageUrl}\n\nRelationships:\n• Ancestors: ${data.ancestorCount}\n• Descendants: ${data.descendantCount}\n• Parents: ${data.parentCount || 0}\n• Children: ${data.childCount || 0}\n• Roots: ${data.rootCount || 0}\n\nCreated:\nBlock #${data.blockNumber}\nTimestamp: ${data.blockTimestamp}`;\n\n/**\n * Main action configuration for getting IP details\n */\nexport const getIPDetailsAction = {\n    name: \"GET_IP_DETAILS\",\n    description: \"Get details for an IP Asset on Story\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting GET_IP_DETAILS handler...\");\n\n        // Initialize or update state\n            let currentState = state;\n            if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        // Generate content using template\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: composeContext({ state: currentState, template: getIPDetailsTemplate }),\n            modelClass: ModelClass.SMALL,\n        });\n\n        // Fetch and format IP details\n        const action = new GetIPDetailsAction();\n        try {\n            const response = await action.getIPDetails(content);\n            const formattedResponse = formatIPDetails(response.data);\n\n            callback?.({\n                text: formattedResponse,\n                action: \"GET_IP_DETAILS\",\n                source: \"Story Protocol API\",\n            });\n            return true;\n        } catch (e) {\n            elizaLogger.error(\"Error fetching IP details:\", e.message);\n            callback?.({\n                text: `Error fetching IP details: ${e.message}`,\n            });\n            return false;\n        }\n    },\n    template: getIPDetailsTemplate,\n    validate: async () => true,\n    // Example usage of the action\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Get details for an IP Asset 0x2265F2b8e47F98b3Bdf7a1937EAc27282954A4Db\",\n                    action: \"GET_IP_DETAILS\",\n                },\n            },\n        ],\n    ],\n    similes: [\"IP_DETAILS\", \"IP_DETAILS_FOR_ASSET\", \"IP_DETAILS_FOR_IP\"],\n};\n","export * from \"./actions/registerIP\";\nexport * from \"./actions/licenseIP\";\nexport * from \"./actions/attachTerms\";\nexport * from \"./actions/getAvailableLicenses\";\nexport * from \"./actions/getIPDetails\";\nexport * from \"./providers/wallet\";\nexport * from \"./types\";\n\nimport type { Plugin } from \"@elizaos/core\";\nimport { storyWalletProvider } from \"./providers/wallet\";\nimport { registerIPAction } from \"./actions/registerIP\";\nimport { licenseIPAction } from \"./actions/licenseIP\";\nimport { getAvailableLicensesAction } from \"./actions/getAvailableLicenses\";\nimport { getIPDetailsAction } from \"./actions/getIPDetails\";\nimport { attachTermsAction } from \"./actions/attachTerms\";\n\nexport const storyPlugin: Plugin = {\n    name: \"story\",\n    description: \"Story integration plugin\",\n    providers: [storyWalletProvider],\n    evaluators: [],\n    services: [],\n    actions: [\n        registerIPAction,\n        licenseIPAction,\n        attachTermsAction,\n        getAvailableLicensesAction,\n        getIPDetailsAction,\n    ],\n};\n\nexport default storyPlugin;\n"],"mappings":"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","names":["composeContext","elizaLogger","generateObjectDeprecated","ModelClass","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","zeroAddress","elizaLogger","zeroAddress","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","elizaLogger","elizaLogger","elizaLogger","generateObjectDeprecated","composeContext","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","elizaLogger","generateObjectDeprecated","composeContext","ModelClass"]}